Development and deployment strategy:

1. Intro
2. Python source files
3. Building
4. Release / Distribution

1. Introduction
---------------

I probably want to have runnable Python code and/or little sh scripts available at all times
for development and testing needs.
I would only occasionally need the generated C code and the releaseable binaries (.dll/.so and .exe).

Let's keep the runnable py/sh in "scripts" and the binaries in "bin". Consider adding the former
to $PATH for greatest ease of use.

2. Python files
---------------

File sizes should be kept much smaller than the Bash originals.

Highest-level Python code -- runnable files containing __name__ == "__main__" -- should be named *.py.
Store these in "scripts" as mentioned above and add that to the $PATH.

Store the other files in "src" in a subtree that makes sense as the project develops.
Let us use an __init.py__ in each subdirectory to establish that the subdirectory is a package;
this has implications for scope.

Cython has a problem with aliased imports in the individual code modules: "from foo import bar as baz".
As a workaround, always do the following: "from foo import bar; baz = bar".

3. How to build
----------------

TL;DR: For the bone-dry steps, skip to BUILD STEPS.

Adapted from two stackoverflow questions: 21826137 and 11698482

I ran the following command:
    python setup.py build_ext --inplace

on my toy setup.py in "Projects/scratch":

    from distutils.core import setup
    from Cython.Build import cythonize

    setup(name='Hello world app',
        ext_modules=cythonize("secondary.pyx", language_level=3))

which generated a log of build steps that I tweaked to come up with the following.


BUILD STEPS:
***********

TL;DR: To build, run the build.sh files in "src" and "scripts". Anyway...

Write .pyx include-files to tell cython which code files should go into each dll/so.
For example, here is "includes.pyx":

    include "primary.py"
    include "secondary.py"

Then make sure that in the main source file, the imports point to the include-file,
not the individual code modules:

    from includes import foo        # foo is a function inside primary.pyx listed in includes.pyx

BUT... the individual code modules should refer to each other, not the include-file.

Now build a single .C file from those .pyx files, then the .o, and then the .dll/.so.
(The following steps A1-A3 are for Linux and B1-B3 are for Android. To get the corresponding steps for Windows, go back to
the setup.py shown above and run the same python command on it, generating a build log.
Go through the log and manually rerun the individual steps, tweaking as needed.)

A1.    cython -3 includes.pyx    # produces the .c file
A2.    gcc -pthread -fno-strict-aliasing -O2 -DNDEBUG -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions
-fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic
-D_GNU_SOURCE -fPIC -fwrapv -fPIC -I/usr/include/python3.4m -c includes.c -o build/temp.linux-x86_64-3.4m/includes.o    # produces the .o file
A3.    gcc -pthread -shared -Wl,-z,relro -specs=/usr/lib/rpm/redhat/redhat-hardened-ld build/temp.linux-x86_64-3.4m/includes.o -L/usr/lib64 -lpython3.4m -o /home/projects/scratch/includes.so

B1.    cython -3 includes.pyx    # produces the .c file
B2,    arm-linux-androideabi-clang -mfloat-abi=softfp -mfpu=vfpv3-d16 -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -g -fwrapv -O3 -Wall -march=armv7-a -mfpu=neon -mfloat-abi=softfp -mthumb -Os -march=armv7-a -mfpu=neon -mfloat-abi=softfp -mthumb -Os -fPIC -I/data/data/com.termux/files/usr/include/python3.7m -c includes.c -o build/temp.linux-armv7l-3.7/includes.o    # produces the .o file
B3.    arm-linux-androideabi-clang -shared -L/data/data/com.termux/files/usr/lib -march=armv7-a -landroid-support -L/home/builder/.termux-build/_cache/android5-19b-arm-21-v3/sysroot/usr/lib -march=armv7-a -Wl,--fix-cortex-a8 -L/data/data/com.termux/files/usr/lib -march=armv7-a -landroid-support -L/home/builder/.termux-build/_cache/android5-19b-arm-21-v3/sysroot/usr/lib build/temp.linux-armv7l-3.7/includes.o -L/data/data/com.termux/files/usr/lib -lpython3.7m -o /data/data/com.termux/files/home/projects/miniquery/src/includes.cpython-37m.so
 
Create the main C source file and then the runnable .exe that will use the .so(s):
A4/B4. cython -3 --embed miniquery.py      # miniquery.py imports the .dll/.so's that it needs by their root names
A5.    gcc -I /usr/include/python3.4m -L /usr/lib64 -o miniquery.exe miniquery.c -lpython3.4m
    --or--
B5.    arm-linux-androideabi-clang -I /data/data/com.termux/files/usr/include/python3.7m -L /data/data/com.termux/files/usr/lib -o miniquery miniquery.c -lpython3.7m

4. Release / Distribution
-------------------------

Put .exes in "bin" and .so/.dlls in "lib". That is how we would like to install them.
Put (top-level) scripts in "scripts" and add it to the PATH for easier testing and running in the dev phase.

When compiling, generate .so/.dll rather than static .a files.
    Reason: Have a whole series of .exes corresponding to the main script and they (can) share
    a whole lot of code. Static .a's would introduce massive code bloat.

The distribution must (of course!) include all .exes and .dlls from bin/ but not the *.py from scripts/
and should include cache/ and config/ subdirs, and the contents of the latter.

The sample data can go in data/.
